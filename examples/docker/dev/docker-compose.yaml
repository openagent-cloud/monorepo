name: 'electric-stack'

services:
  # PostgreSQL database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-pgvector.sql:/docker-entrypoint-initdb.d/init-pgvector.sql
    command:
      - -c
      - listen_addresses=*
      - -c
      - wal_level=logical
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - electric-network

  # Prisma database migrations service
  migrations:
    build:
      context: ../../../
      dockerfile: ./examples/migrations/dev/Dockerfile
    container_name: migrations
    restart: 'no'
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: ${INTERNAL_DATABASE_URL}
      NODE_ENV: ${NODE_ENV:-development}
    networks:
      - electric-network

  # ElectricSQL service
  electric:
    image: electricsql/electric
    container_name: electric
    restart: unless-stopped
    environment:
      DATABASE_URL: ${INTERNAL_DATABASE_URL}
      ELECTRIC_INSECURE: 'true'
      # ELECTRIC_SECRET: ${ELECTRIC_SECRET}
    ports:
      - '${ELECTRIC_PORT}:3000'
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - electric-network

  # Caddy HTTP/2 proxy for ElectricSQL (insecure version)
  caddy:
    build:
      context: ../../../
      dockerfile: ./examples/caddy/dev/Dockerfile.insecure
    container_name: caddy
    restart: unless-stopped
    volumes:
      - ../../../examples/caddy/dev/Caddyfile.insecure:/etc/caddy/Caddyfile
    ports:
      - '${CADDY_PORT}:${CADDY_PORT}'
    environment:
      - CADDY_PORT=${CADDY_PORT}
      # - JWT_SECRET=${JWT_SECRET}
      - ELECTRIC_URL=http://electric:3000
      # - ELECTRIC_SECRET=${ELECTRIC_SECRET}
    depends_on:
      electric:
        condition: service_healthy
    networks:
      - electric-network

  # NestJS backend api
  server:
    build:
      context: ../../../
      dockerfile: packages/server/Dockerfile
    container_name: server
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      electric:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    env_file:
      - ../../../.env
    environment:
      APP_DESCRIPTION: ${APP_DESCRIPTION}
      APP_NAME: ${APP_NAME}
      CLIENT_URL: ${CLIENT_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
      DATABASE_URL: ${INTERNAL_DATABASE_URL}
      GITHUB_CALLBACK_URL: ${GITHUB_CALLBACK_URL}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      MAIL_FROM: ${MAIL_FROM}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PASS: ${MAIL_PASS}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USER: ${MAIL_USER}
      NODE_ENV: development
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_CDN_URL: ${S3_CDN_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_REGION: ${S3_REGION}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      SERVER_PORT: ${SERVER_PORT}
    ports:
      - '${SERVER_PORT}:${SERVER_PORT}'
    volumes:
      - ../../../:/app
      - server_node_modules:/app/node_modules
      - server_dist:/app/packages/server/dist
    command: sh -c "cd packages/server && npm install && npx prisma generate --schema=../shared/prisma/schema.prisma && ts-node-dev --transpile-only --ignore-watch node_modules src/main.ts"
    networks:
      - electric-network

  # React frontend service
  client:
    build:
      context: ../../../
      dockerfile: ./packages/client/Dockerfile
    container_name: client
    restart: unless-stopped
    depends_on:
      - server
      - electric
      - caddy
    env_file:
      - ../../../.env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_URL: http://localhost:${SERVER_PORT}
      VITE_ELECTRIC_URL: http://localhost:${ELECTRIC_PORT}
      VITE_CADDY_URL: http://localhost:${CADDY_PORT}
      CLIENT_PORT: ${CLIENT_PORT}
      # Fix for Rollup architecture issues
      ROLLUP_NATIVE: 'false'
    ports:
      - '${CLIENT_PORT}:${CLIENT_PORT}'
    volumes:
      - ../../../packages/client:/app/packages/client
      - ../../../tsconfig.json:/app/tsconfig.json
      - /app/node_modules
    command: sh -c "npm run dev --workspace=client -- --host 0.0.0.0 --port ${CLIENT_PORT}"
    networks:
      - electric-network

volumes:
  postgres_data:
  caddy_data:
  caddy_config:
  server_dist:
  server_node_modules:

networks:
  electric-network:
    name: electric-network
