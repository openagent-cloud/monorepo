services:
  postgres:
    image: pgvector/pgvector:pg16
    # Removed custom build since we're using the official pgvector image
    container_name: ecs_db_prod
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Strengthen authentication settings
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256 --auth-local=scram-sha-256'
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - ecs_postgres_data_prod:/var/lib/postgresql/data
    command:
      - -c
      - listen_addresses=*
      - -c
      - wal_level=logical
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ecs_network_prod

  electric:
    image: electricsql/electric:canary
    container_name: ecs_electric_prod
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      ELECTRIC_INSECURE: ${ELECTRIC_INSECURE}
      ELECTRIC_SECRET: ${ELECTRIC_SECRET}
      # Override INTERNAL_DATABASE_URL which may be pointing to wrong address
      INTERNAL_DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    ports:
      - ${ELECTRIC_PORT}:${ELECTRIC_PORT}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ecs_network_prod

  caddy:
    build:
      context: ./lib/caddy
      dockerfile: Dockerfile
      args:
        CADDYFILE: Caddyfile.prod
    container_name: ecs_caddy_prod
    ports:
      - '${CADDY_PORT}:${CADDY_PORT}'
    environment:
      JWT_SECRET: ${JWT_SECRET}
      ELECTRIC_URL: ${ELECTRIC_URL}
      ELECTRIC_SECRET: ${ELECTRIC_SECRET}
    restart: unless-stopped
    depends_on:
      electric:
        condition: service_healthy
    networks:
      - ecs_network_prod

  migrations:
    build:
      context: ./lib/prisma
      dockerfile: Dockerfile.migrations.prod
    container_name: ecs_migrations_prod
    restart: 'no'
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      NODE_ENV: production
      # Override INTERNAL_DATABASE_URL which may be pointing to wrong address
      INTERNAL_DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}

    networks:
      - ecs_network_prod

  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - '${NEST_PORT}:${NEST_PORT}'
    container_name: ecs_server_prod
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      NEST_PORT: ${NEST_PORT}
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET}
      # Override INTERNAL_DATABASE_URL which may be pointing to wrong address
      INTERNAL_DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - .:/app
      - server_node_modules:/app/node_modules
      - server_dist:/app/dist
    # Production command - no hot reload, run built application
    command: ['node', 'dist/src/main.js']
    restart: unless-stopped
    networks:
      - ecs_network_prod

volumes:
  ecs_postgres_data_prod:

networks:
  ecs_network_prod:
    name: ecs_network_prod
    external: true
