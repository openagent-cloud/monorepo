name: '@openagent-cloud/cred-store'

services:
  # PostgreSQL database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: cred-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command:
      - -c
      - listen_addresses=*
      - -c
      - wal_level=logical
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - openagent-cloud-cred-store

  # ElectricSQL service
  electric:
    image: electricsql/electric
    container_name: cred-electric
    restart: unless-stopped
    environment:
      DATABASE_URL: ${INTERNAL_DATABASE_URL}
      ELECTRIC_INSECURE: true
      # ELECTRIC_SERVICE_NAME: 'cred-electric'
      ELECTRIC_PORT: ${ELECTRIC_PORT}
      ELECTRIC_LOG_LEVEL: debug
      ELECTRIC_SHAPE_CHUNK_BYTES_THRESHOLD: 10485760
      ELECTRIC_CACHE_MAX_AGE: 60
      ELECTRIC_CACHE_STALE_AGE: 300
      # ELECTRIC_SECRET: ${ELECTRIC_SECRET}
    ports:
      - '${ELECTRIC_PORT}:${ELECTRIC_PORT}'
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - openagent-cloud-cred-store

  # Prisma database migrations service
  migrations:
    build:
      context: ../..
      dockerfile: ./lib/prisma/Dockerfile.migrations.dev
      args:
        PRISMA_DIR: ./lib/prisma
    container_name: cred-migrations
    restart: 'no'
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: ${INTERNAL_DATABASE_URL}
      NODE_ENV: ${NODE_ENV:-development}

    networks:
      - openagent-cloud-cred-store

  # Caddy HTTP/2 proxy for ElectricSQL (insecure version)
  caddy:
    build:
      context: ../caddy
      dockerfile: Dockerfile
      args:
        CADDYFILE: Caddyfile
    container_name: cred-caddy
    restart: unless-stopped
    volumes:
      - ../caddy/Caddyfile:/etc/caddy/Caddyfile
    ports:
      - '${CADDY_PORT}:${CADDY_PORT}'
    environment:
      - CADDY_PORT=${CADDY_PORT}
      - ELECTRIC_URL=http://electric:3000
      # - JWT_SECRET=${JWT_SECRET}
      # - ELECTRIC_SECRET=${ELECTRIC_SECRET}
    depends_on:
      electric:
        condition: service_healthy
    networks:
      - openagent-cloud-cred-store

  server:
    build:
      context: ../..
      dockerfile: ./lib/docker/Dockerfile.dev
    ports:
      - '${SERVER_PORT}:${SERVER_PORT}'
    container_name: cred-server
    environment:
      DATABASE_URL: ${INTERNAL_DATABASE_URL}
      SERVER_PORT: ${SERVER_PORT}
      CRED_ENCRYPT_KEY: ${CRED_ENCRYPT_KEY}
      NODE_ENV: ${NODE_ENV:-development}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ../../:/app
      - server_node_modules:/app/node_modules
    # Use our entrypoint script for dependency management and hot reloading
    command: /app/lib/docker/docker-entrypoint.sh
    networks:
      - openagent-cloud-cred-store

  # # NestJS backend api
  # server:
  #   build:
  #     context: ../../../
  #     dockerfile: packages/server/Dockerfile
  #   container_name: server
  #   restart: unless-stopped
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     electric:
  #       condition: service_healthy
  #     migrations:
  #       condition: service_completed_successfully
  #   env_file:
  #     - ../../../.env
  #   environment:
  #     APP_DESCRIPTION: ${APP_DESCRIPTION}
  #     APP_NAME: ${APP_NAME}
  #     CLIENT_URL: ${CLIENT_URL}
  #     CORS_ORIGIN: ${CORS_ORIGIN}
  #     DATABASE_URL: ${INTERNAL_DATABASE_URL}
  #     GITHUB_CALLBACK_URL: ${GITHUB_CALLBACK_URL}
  #     GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
  #     GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
  #     JWT_SECRET: ${JWT_SECRET}
  #     MAIL_FROM: ${MAIL_FROM}
  #     MAIL_HOST: ${MAIL_HOST}
  #     MAIL_PASS: ${MAIL_PASS}
  #     MAIL_PORT: ${MAIL_PORT}
  #     MAIL_USER: ${MAIL_USER}
  #     NODE_ENV: development
  #     OPENAI_API_KEY: ${OPENAI_API_KEY}
  #     S3_ACCESS_KEY: ${S3_ACCESS_KEY}
  #     S3_BUCKET_NAME: ${S3_BUCKET_NAME}
  #     S3_CDN_URL: ${S3_CDN_URL}
  #     S3_ENDPOINT: ${S3_ENDPOINT}
  #     S3_REGION: ${S3_REGION}
  #     S3_SECRET_KEY: ${S3_SECRET_KEY}
  #     SERVER_PORT: ${SERVER_PORT}
  #   ports:
  #     - '${SERVER_PORT}:${SERVER_PORT}'
  #   volumes:
  #     - ../../../:/app
  #     - server_node_modules:/app/node_modules
  #     - server_dist:/app/packages/server/dist
  #   command: sh -c "cd packages/server && npm install && npx prisma generate --schema=../shared/prisma/schema.prisma && ts-node-dev --transpile-only --ignore-watch node_modules src/main.ts"
  #   networks:
  #     - openagent-cloud-cred-store

  # # React frontend service
  # client:
  #   build:
  #     context: ../../../
  #     dockerfile: ./packages/client/Dockerfile
  #   container_name: client
  #   restart: unless-stopped
  #   depends_on:
  #     - server
  #     - electric
  #     - caddy
  #   env_file:
  #     - ../../../.env
  #   environment:
  #     NODE_ENV: ${NODE_ENV:-development}
  #     VITE_API_URL: ${VITE_API_URL}
  #     VITE_ELECTRIC_URL: ${VITE_ELECTRIC_URL}
  #     CLIENT_PORT: ${CLIENT_PORT}
  #     # Fix for Rollup architecture issues
  #     ROLLUP_NATIVE: 'false'
  #   ports:
  #     - '${CLIENT_PORT}:${CLIENT_PORT}'
  #   volumes:
  #     - ../../../packages/client:/app/packages/client
  #     - /app/packages/client/node_modules
  #     - ../../../tsconfig.json:/app/tsconfig.json
  #     - client_node_modules:/app/node_modules
  #   command: sh -c "cd packages/client && npm install && npm run dev -- --host 0.0.0.0 --port ${CLIENT_PORT}"
  #   networks:
  #     - openagent-cloud-cred-store

volumes:
  postgres_data:
  server_dist:
  server_node_modules:
  # caddy_data:
  # caddy_config:
  # server_dist:
  # server_node_modules:
  # client_node_modules:

networks:
  openagent-cloud-cred-store:
    name: openagent-cloud-cred-store
